#Basic Function
Remove all the objects from R environment
rm(list=ls())

# Let’s create extra positive observations using SMOTE. We set perc.over = 100 to double the quantity of positive cases, and set 
# perc.under=200 to keep half of what was created as negative cases.
library(DMwR)
train1 = SMOTE(Chargeoff_2 ~ ., train, perc.over = 100, perc.under=400)


we can use ANCOVA (analysis of covariance) technique to capture association between continuous and categorical variables.

#CHange one of the labels of a variables
levels(df$RR)[levels(df$RR) == "Recovery"] = "Chargeoff"


# Drop variables with the missing values more than 1
df[, colSums(is.na(df)) > 1] = NULL

#If rStudio is giving error: "Error in plot.new() : figure margins too large in r"
par(mar=c(1,1,1,1))

#Making a subset of only numerical variables.
train_num <- train[sapply(train,is.numeric)]

table(predicted= Pred, True=test$Delinquent)

#Counting how many unique elements are there column-wise. It will give only unique values. So if these values are less than
 #the observations for a variable, means there are duplicate values in that column
sapply(df, function(x) length(unique(x)))   #OR
rapply(df,function(x) length(unique(x)))

#CHeck how many classes are there in the dataset
table(sapply(df2, function(x) class(x)))

train <- read.csv("train_loan.csv", na.strings = c(""," ",NA))

# Delete multiple columns at once.
df1 = df[, -c(1,2,4,10,11,14,15,17,18,21:24,31,32,42)]

# Impute all the missing values with the mean
df1$PPvD[is.na(df1$PPvD)] = mean(df1$PPvD, na.rm=TRUE)

#Changing the name of a variable with index. Here we change the 3rd column
colnames(train)[3] = "Idd"

#Getting all the quantiles of a variables
quantile(df$Prop_Balance, c(0.1,0.2, 0.3,0.4,0.5,0.6,0.7,0.8,0.9,1))

#Changing the name of variable with column index 2
colnames(df2)[2] = "Case_Id"

#Get the modal value of variable
library(modeest)
mlv(df$AvgDailyBalance, method = "mfv")

#Generating 2000 cases with zero and ones and in the ratio of 14% and 18% respectively
xx = sample(c(0,1), 2000, replace=TRUE, prob = c(0.14, 0.86))
prop.table(table(xx))

#Create a new variable mpg01 in df Auto which includes 1 if the value of mpg is greater than its median and zero otherwise
Auto$mpg01 = ifelse(Auto$mpg > median(Auto$mpg), 1, 0)

#Merging by two or more diff columns
zz = merge(train, test, by =c("ccid", "conno", "web_top_n"))

#Removing duplicated observations from a df.
data1 = data[!duplicated(data),] #OR WE CAN USE
data1 = unique(data)


##############   TREATMENT OF MISSING VALUES   ###############################
#Checking if there is any missing element in the dataset
length(Dataset[is.na(Dataset)])

#Show the missing values in all columns
colSums(is.na(train)) OR sapply(train, function(x) sum(is.na(x)))

#Show only columns which have one or more missing values
M <- sapply(train, function(x) sum(is.na(x)))
M[M>0]

#Alternatively, we can use individual plots like this
plot(Auto$displacement, main="Displacement", col="red", type="p")

#####   DRAWING MUPLTIPLE BOXPLOTS OF NUMERICAL VALUES   ########
boxplot(train[,6:9], horizontal=TRUE, main="Crime Rates in US") #For multiple variables
boxplot(train$Field9, horizontal=TRUE) #For single variable



##Checking the classes of all the variables in a dataset
sapply(train, function (x) class(x))

#Making comparison plots for multiple numerical variables
pairs(train[,6:9]) #Here we're making plots for 6th to 9th variables

#Making the correlation of all but one (Destination, it's categorical) variables
cor(subset(Airlines, select=-Destination))


#args function give the argument of any function
args(geom_line)
#How many TotalDelay are actually zero. It will show values in T & F
summary(Airlines$TotalDelay > 0)

#Flights with TotalDelay of more than or equal to 5 hours and TimeTaken less than 10 hours
subset(Airlines, TotalDelay >= 5 & TimeTaken < 10)
### OR we can use the below code for same
Airlines[Airlines$TotalDelay >= 5 & Airlines$TimeTaken < 10, ]

#Flights with TotalDelay of less than 6 hours OR TimeTaken more than 10 hours
subset(Airlines, TotalDelay < 6 | TimeTaken > 8)

There so many missing values in the Airlines df. we can get only available values using "complete. cases"
good = complete.cases(Airlines) #Taking logical values of missing & available values (T/F)
Airlines[good][,1:20] #Getting only available values, 1 to 20 columns and all the rows. It will remove rows with NA values 




##MAKING ORDERED FACTORS###
#Checking the levels of factor variable age.range
levels(Airlines$age.range)
library(ggplot2)
qplot(data=Airlines, x=age.range) #Suppose the histogram is not in the ordered format

#We can make the histogram in ordered format using this
Airlines$age$range = ordered(Airlines$age.range, level = c("Under 18", "18-24", "25-34", "35-44", "45-54", "55-64", "65 or Above"))
ggplot(aes(x=age.range), data=Airlines) + geom_histogram()

##Or this
levels(Airlines$age.range) = c("Under 18", "18-24", "25-34", "35-44", "45-54", "55-64", "65 or Above")
ggplot(aes(x=age.range), data=Airlines) + geom_histogram()
#Or this. Here Ordered=T, it should be in that order as in levels and use ggplot instead of qplot
Airlines$age.range = factor(Airlines$age.range, level = c("Under 18", "18-24", "25-34", "35-44", "45-54", "55-64", "65 or 
  Above", ordered=T))
ggplot(aes(x=age.range), data=Airlines) + geom_histogram()


####Deriving TIME VARIABLES IN THE DATASET FROM DATE VARIABLE
#Suppose the time format in Airlines is like this "2015-05-26 21:45:32". We can add the time variables using the strptime()
 # function of PubDate. Here we've used "%Y-%m-%d %H:%M:%S" bcz date is currently in this format
Airlines$PubDate = strptime(Airlines$PubDate, "%Y-%m-%d %H:%M:%S")

#Now add the variables weekday, Hour & Month in the dataset
Airlines$Weekday = Airlines$PubDate$wday
Airlines$Hour = Airliness$PubDate$hour
Airlines$Month = Airlines$PubDate$mon



#Copying a column to a df from another df. Here we copy sold column from FLipkart to descriptionText
descriptionText$sold = Flipkart$sold

#Suppose there are no columns name in a dataset movie. Add the columns using colnames function
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate", "IMDB", Thriller", "War", "Western")

#add a "M" in front of all the variable names in movies. check ?paste0()
names(movies) = paste0("M", names(movies))

#Creating a dummy variable Popular in the movies dataset
Nmovies$Popular = rep(0,nrow(movies))


#Normalizing the data using caret package. for each variable, the normalization process subtracts the mean and divides
#by the standard deviation.In the normalized dataset, all of the variables should have mean 0 and standard deviation 1
library(caret)
preproc = preProcess(Flipkart)
FlipNorm = predict(preproc, Flipkart)

############# SPLITTING THE DATA INTO TRAIN & TEST SET ######################
Read the file:-Airlines = read.csv(file = "C:\\Users\\AirlineDelay.csv"). Use stringAsFactors=F if there is a lot of text data
•	Splitting dataset which has continuousdependant variables
spl=sample(nrow(Airlines),0.7*nrow(Airlines)) 
AirlinesTrain = Airlines[spl,]
AirlinesTest = Airlines[-spl,]

•	Splitting dataset which has categorical dependent variables
library(caTools)
split = sample.split(quality$PoorCare, SplitRatio = 0.75) 
split #We can see that split has been divided into T & F values
qualityTrain = subset(quality, split == TRUE) #traning set
qualityTest = subset(quality, split == FALSE) #testing set

•	Splitting the data using another method
NewsTrain1 = news[1:6532, ]
NewsTest1 = news[6533:8402, ]


##################         LUBRIDATE DATE EXTRACTION       #####################
library(lubridate)
mtrain$Date = ymd(mtrain$Date) #ymd bcs date is in 2014-4-23 format. We use mdy if it is 4-23-2014 format and so on. We also use
ymd_hms if there are hour, minutes and seconds

mtrain$WeekNum = week(mtrain$Date)
mtrain$Month = month(mtrain$Date)
mtrain$Day = day(mtrain$Date)
mtrain$year = year(mtrain$Date)
mtrain$hour = hour(mtrain$Date)

####################      strptime Date Extraction      ##################################
df$date = strptime(df$date, "%m/%d/%Y %H:%M")   #Here date is mentioned in the format of 2/22/16 14:10.
news$PubDate = strptime(news$PubDate, "%Y-%m-%d %H:%M:%S") #Here the date is mentioned in the format of 16-2-22 14:10
df$Month = df$date$mon
df$Year = df$date$year
df$Weekday = df$date$wday
df$Hour = df$date$hour
df$Minutes = df$rdate$min


####################      as.Date.factor Date Extraction      ##################################
df$registerdate = as.Date.factor(df$registerdate, "%m/%d/%Y %H:%M")
df$Month = as.integer(format(df$registerdate, "%m")
df$Year = as.integer(format(df$registerdate, "%Y")  and so on for other labels


###################     Using swirl package for R     ####################
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
install_from_swirl("R Programming")


###################     Outlier Treatment : Percentile Capping   ####################

df is dataset here
pcap <- function(x){
  for (i in which(sapply(x, is.numeric))) {
    quantiles <- quantile( x[,i], c(.05, .95 ), na.rm =TRUE)
    x[,i] = ifelse(x[,i] < quantiles[1] , quantiles[1], x[,i])
    x[,i] = ifelse(x[,i] > quantiles[2] , quantiles[2], x[,i])}
  x
}
df1 = pcap(df) #df1 will have no outliers.



##################           OUTLIER TREATMENT      #########################################

outlierKD <- function(dt, var) {
     var_name <- eval(substitute(var),eval(dt))
     na1 <- sum(is.na(var_name))
     m1 <- mean(var_name, na.rm = T)
     par(mfrow=c(2, 2), oma=c(0,0,3,0))
     boxplot(var_name, main="With outliers")
     hist(var_name, main="With outliers", xlab=NA, ylab=NA)
     outlier <- boxplot.stats(var_name)$out
     mo <- mean(outlier)
     var_name <- ifelse(var_name %in% outlier, NA, var_name)
     boxplot(var_name, main="Without outliers")
     hist(var_name, main="Without outliers", xlab=NA, ylab=NA)
     title("Outlier Check", outer=TRUE)
     na2 <- sum(is.na(var_name))
     cat("Outliers identified:", na2 - na1, "n")
     cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(var_name))*100, 1), "n")
     cat("Mean of the outliers:", round(mo, 2), "n")
     m2 <- mean(var_name, na.rm = T)
     cat("Mean without removing outliers:", round(m1, 2), "n")
     cat("Mean if we remove outliers:", round(m2, 2), "n")
     response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
     if(response == "y" | response == "yes"){
          dt[as.character(substitute(var))] <- invisible(var_name)
          assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
          cat("Outliers successfully removed", "n")
          return(invisible(dt))
     } else{
          cat("Nothing changed", "n")
          return(invisible(var_name))
     }
}


outlierKD(dat, variable) # Just replace dat with the dataframe and variable with actual variable name. It will ask if you wanna do the
    # outlier treatment. Type yes/no
